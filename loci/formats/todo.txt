QuickTime:
* svq3 codec (lower priority)

Implement readers for other file formats:
* SDT (java/loci/slim/SlimPlotter.java, data/sdt) -- but talk to Curtis first
* Implement LegacyQTWriter (similar to LegacyQTReader -- may want to split out
  common QTJava handling code to a LegacyQTHelper class), based on improved
  ImageJ QT writer plugin that now works on both Win32 and Mac OS X. Since the
  main point of such a class would be to support additional codecs provided by
  QTJava for free, it would be ideal to have an API in place to specify which
  codec to use (this might even help in debugging the Motion JPEG-B colors).
* Anything listed online: http://www.loci.wisc.edu/ome/formats.html

Debugging:
* Switch ZVI support to use native OLE parser -- tell Curtis so he can email
  David Robinson.
* Figure out what is wrong with Motion JPEG-B colors in QTReader.

Address performance issues:
* Check whether ImageTypeSpecifier class is useful for simplifying
  BufferedImage tasks.
* Fix LegacyQTReader to work with reasonable efficiency (study ImageJ QuickTime
  plugins and figure out why what we are doing is so much slower -- the
  original code from LegacyQTReader was based on an older version of the ImageJ
  QuickTime reader plugin, so something must have changed).
* Investigate George Birbilis's suggestion of using the %WINDIR% environment
  variable instead of hard-coding "/Windows" as the prefix for paths to check
  for QTJava.zip (in LegacyQTReader.

ImageJ plugin:
* Improve plugin bundle to include multiple plugins -- one for import and one
  for export. Right now there is no easy way to call the Bio-Formats writers
  from within ImageJ.
* Investigate whether current reflection-based approach in modified
  HandleExtraFileTypes is good enough, and modify if necessary. Does
  Bio-Formats play nicely with other installed plugins used by
  HandleExtraFileTypes? Bio-Formats should probably be tried first, but if it
  fails, HandleExtraFileTypes should try the remaining standalone plugins
  before giving up. This may require a restructuring of LociPlugin to extend
  ImagePlus in addition to implementing PlugIn (see the BioRad_Reader plugin
  for an example).

Adapt Bio-Formats API to support OMERO:
http://cvs.openmicroscopy.org.uk/tiki/tiki-index.php?page=Bio-Formats+Import+Discussion
1. Parallel APIs, because different readers acquire pixels in different ways:
  * one for BufferedImages (e.g., for ImageIO-based readers)
    - BufferedImage openImage(String id, int no)
  * one for byte[] array (can specify reasonable variants: byte order, pixel
    type, etc. -- but not interleaved channels) (for OMERO support)
    - byte[] openBytes(String id, int no)
  * utility classes to convert between byte[] and BufferedImage
  * "natively" use whichever approach is natural, and call utility class to
    convert from "native" structure to that required by the API call as needed
2. Way to convert between flat image plane index and ZCT coordinates:
  * in org.openmicroscopy.xml.OMENode: int getIndex(int z, int c, int t)
  * in org.openmicroscopy.xml.OMENode: int getZ(int index), getT, getC
3. Way to easily get SizeZ, SizeC and SizeT:
  * already present as OMETools.getSize* methods
4. Layer atop base Bio-Formats functionality: VisBio file stitching.
5. Fine to continue using OME-XML for internal metadata representation. 
6. Bio-Formats support should be possible in both OMERO and OME-perl
   (so we can phase out omeul):
  * for OME-perl, transmit pixels to OMEIS via HTTP, then pass OME-XML to perl
    API for actual import (need to provide OMEIS image ID or whatever within
    the XML?)
  * for OMERO, Bio-Formats API called directly by OMERO import engine 
