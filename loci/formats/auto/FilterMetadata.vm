//
// FilterMetadata.vm
//

/*
LOCI Bio-Formats package for reading and converting biological file formats.
Copyright (C) 2005-@year@ Melissa Linkert, Curtis Rueden, Chris Allan,
Eric Kjellman and Brian Loranger.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU Library General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Library General Public License for more details.

You should have received a copy of the GNU Library General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

/*-----------------------------------------------------------------------------
 *
 * THIS IS AUTOMATICALLY GENERATED CODE.  DO NOT MODIFY.
 * Created by $user via MetadataAutogen on $timestamp
 *
 *-----------------------------------------------------------------------------
 */

package loci.formats.meta;

import loci.formats.DataTools;

/**
 * An implementation of {@link MetadataStore} that removes unprintable
 * characters from metadata values before storing them in a delegate
 * MetadataStore.
 *
 * <dl><dt><b>Source code:</b></dt>
 * <dd><a href="https://skyking.microscopy.wisc.edu/trac/java/browser/trunk/loci/formats/meta/FilterMetadata.java">Trac</a>,
 * <a href="https://skyking.microscopy.wisc.edu/svn/java/trunk/loci/formats/meta/FilterMetadata.java">SVN</a></dd></dl>
 *
 */
public class FilterMetadata implements MetadataStore {

  // -- Fields --

  private MetadataStore delegate;
  private boolean filter;

  // -- Constructor --

  public FilterMetadata(MetadataStore delegate, boolean filter) {
    this.delegate = delegate;
    this.filter = filter;
  }

  // -- MetadataStore API methods --

  public void createRoot() {
    delegate.createRoot();
  }

  public Object getRoot() {
    return delegate.getRoot();
  }

  public void setRoot(Object root) {
    delegate.setRoot(root);
  }

#foreach ($entity in $entities)

  // -- $entity.name() property storage -
#foreach ($prop in $entity.props())

  /* @see MetadataStore#set$entity.name()$prop.name()($prop.type(true), $entity.indicesList(true, false)) */
  public void set$entity.name()$prop.name()($prop.type(true) $prop.varName(), $entity.indicesList(true, true)) {
#if ($prop.type(true) == "String")
    String temp = filter ? DataTools.sanitize($prop.varName()) : $prop.varName();
    delegate.set$entity.name()$prop.name()(temp, $entity.indicesList(false, true));
#else
    delegate.set$entity.name()$prop.name()($prop.varName(), $entity.indicesList(false, true));
#end
  }
#end##foreach $prop
#end##foreach $entity

}
