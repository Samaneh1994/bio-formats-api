                                   Overview
                                  ----------

This document describes all of the tests that must be run prior to a stable
release of Bio-Formats.  Failure to complete any of the listed steps increases
the chances of a bug (regression or otherwise) being present in the release.

The automated testing steps can be performed once, on any machine.
The manual testing steps (ImageJ and command line) should be perfomed three
times: once on Mac OS X, once on Linux, and once on Windows.

                                Pre-requisites
                               ----------------

It is assumed that you have a checkout of LOCI codebase:

  svn co http://dev.loci.wisc.edu/svn/java/trunk $LOCI_CHECKOUT

where $LOCI_CHECKOUT is the path to your working copy.

To perform automated tests, you will also need a checkout of the OMERO
codebase:

  svn co http://svn.openmicroscopy.org.uk/svn/omero/trunk $OMERO_CHECKOUT

where $OMERO_CHECKOUT is the path to your working copy.

You will also need to install (and possibly configure) the following
third-party software:

 * Ant (for compiling and automated tests)
 * ImageJ (for some manual tests)
 * MATLAB (for some manual tests)

Finally, you will need to have access to one of the OME data repositories.
For simplicity, this document assumes that you are using the LOCI dev data
repository and that it is mounted at /mnt/data/.

                               Automated testing
                              -------------------

There are three sets of automated tests that should be run on all data in the
repository.

1) Verify that files can be initialized, and that the core metadata reported
   is consistent with previous releases.

   To run this test:

     cd $LOCI_CHECKOUT
     ant clean jars tools
     cd components/test-suite
     ant -Dtestng.directory=/mnt/data/$FORMAT/ test-all

   where $FORMAT is one of the directories in /mnt/data/.

   Results of this test will be written to
   $LOCI_CHECKOUT/components/test-suite/test-output/ and a .log file in
   $LOCI_CHECKOUT/components/test-suite.
   All of the tests should pass.

2) Verify that files can be converted.

   To run this test:

     cd $LOCI_CHECKOUT
     ant clean jars tools
     cd components/test-suite
     ant -Dtestng.directory=/mnt/data/$FORMAT/ test-convert

   where $FORMAT is one of the directories in /mnt/data/.

   Results of this test will be written to
   $LOCI_CHECKOUT/components/test-suite/test-output/ and a .log file in
   $LOCI_CHECKOUT/components/test-suite.
   All of these tests should pass.

3) Verify that calls to MetadataStore are sane.

   To run this test:

     cd $OMERO_CHECKOUT
     ./build.py
     ant test-compile
     cd components/tools/OmeroImporter/target
     ./metadata-validator /mnt/data/$FORMAT/**/*

   where $FORMAT is one of the directories in /mnt/data/.

   Results of this test will be written to
   $OMERO_CHECKOUT/components/tools/OmeroImporter/target/test-output/.
   All of these tests should pass.


                                ImageJ testing
                               ----------------

Due to the size of the data repository, ImageJ testing is only done on a small
subset of files.  This set contains one file in each of the supported file
formats; you will find it in /mnt/data/manual-test-data/.

First, build and install the LOCI plugins:

  cd $LOCI_CHECKOUT
  ant clean tools
  cp artifacts/loci_tools.jar $IMAGEJ/plugins

  where $IMAGEJ is the path to your installation of ImageJ.

For every file in the testing set and each of the following option
combinations:

 * Select Plugins > LOCI > Bio-Formats Importer
 * Check boxes in the options dialog as described in the option combination
   description.
 * Select "OK".
 * Enter data into any subsequent dialog boxes, as directed by the option
   combination description.
 * Select Plugins > LOCI > Bio-Formats Exporter.
 * Export to any one of the supported file formats.  Once all tests have been
   run, every supported export format should have been tested.

1) View stack with: Standard ImageJ
   Display metadata in results window
   Group files with similar names
   Autoscale

   Accept default file grouping string in file grouping dialog.

2) View stack with: Metadata only

3) View stack with: Hyperstack
   Display OME-XML metadata
   Open all series
   Crop on import

   Specify cropping parameters such that the crop rectangle is entirely within
   the image bounds.

4) View stack with: Data Browser
   Crop on import

   Specify cropping parameters such that the crop rectangle is outside of the
   image bounds.  For example, if the image is 512x512, you might enter x = 0,
   y = 256, width = 1000, height = 512.

   An error message should be displayed indicating that the cropping
   parameters are invalid.

5) View stack with: Data Browser
   Stack order: (anything except "Default")

6) View stack with: Standard ImageJ
   Swap dimensions
   Concatenate series when compatible
   RGB colorize channels

   Reassign every axis in the dimension swapping dialog.

7) View stack with: Hyperstack
   Custom colorize channels
   Split focal planes

   Select a different color for every channel in the channel color dialogs.
   Do not choose red (255, 0, 0), green (0, 255, 0) or blue (0, 0, 255) for
   any of the channels.

8) View stack with: Standard ImageJ
   Specify range for each series
   Merge channels to RGB
   Split timepoints

   Specify valid, non-default ranges for all axes.

9) View stack with: Standard ImageJ
   Specify range for each series

   Specify invalid range for at least one axis.

   An error message should be shown indicating that the range is invalid.

10) View stack with: Standard ImageJ
    Display ROIs
    Use virtual stack
    Record modifications to virtual stack

TODO : more option combinations needed?

Once the test files pass, the following plugin features should be tested:

1) Update to the latest trunk build.

   * Select Plugins > LOCI > Update LOCI Plugins.
   * Set release to "Trunk build".
   * Select "OK".
   * Restart ImageJ.
   * Select Help > About Plugins > LOCI Plugins and verify that the revision
     number is correct.

2) Update to today's daily build.

   * Select Plugins > LOCI > Update LOCI Plugins.
   * Set release to "Daily build (today)".
   * Select "OK".
   * Restart ImageJ.
   * Select Help > About Plugins > LOCI Plugins and verify that the revision
     number is correct.

3) Update to yesterday's daily build.

   * Select Plugins > LOCI > Update LOCI Plugins.
   * Set release to "Daily build (yesterday)".
   * Select "OK".
   * Restart ImageJ.
   * Select Help > About Plugins > LOCI Plugins and verify that the revision
     number is correct.

4) Update to the stable build.

   * Select Plugins > LOCI > Update LOCI Plugins.
   * Set release to "Stable build (x.x.x)".
   * Select "OK".
   * Restart ImageJ.
   * Select Help > About Plugins > LOCI Plugins and verify that the revision
     number is correct.

5) Automatic upgrade check.

   * Select Plugins > LOCI > LOCI Plugins Configuration.
   * Select the "Upgrade" tab.
   * Check the "Automatically check for new version of the LOCI plugins" box.
   * Open a file (using Plugins > LOCI > Bio-Formats Importer) and verify that
     the upgrade check happens.

6) Verify that formats can be disabled.

   * Select Plugins > LOCI > LOCI Plugins Configuration.
   * Select the "Formats" tab.
   * Choose a format from the list.
   * Uncheck the "Enabled" box.
   * Attempt to open a file in the chosen format.  An error message should be
     displayed.

7) Verify that windowless import works.

   * Select Plugins > LOCI > LOCI Plugins Configuration.
   * Select the "Formats" tab.
   * Choose a format from the list.
   * Check the "Enabled" box.
   * Check the "Windowless" box.
   * Open a file in the chosen format.  There should be no windows displayed
     between when the file is chosen and when the images are displayed.

8) Verify that the shortcut window buttons are correct.

   * Select Plugins > LOCI > LOCI Plugins Shortcut Window.
   * Click each button and verify that the results are identical to the
     results of clicking the corresponding entry in the Plugins > LOCI menu.

9) Verify that all of the example macros work.

   Example macros are in $LOCI_CHECKOUT/components/loci-plugins/utils/macros/.

10) Verify that all of the example plugins work.

   Example plugins are in $LOCI_CHECKOUT/components/loci-plugins/utils/*.java


                           Command line/API testing
                          --------------------------

Due to the size of the data repository, command line testing is only done on a
small subset of files.  This set contains one file in each of the supported file
formats; you will find it in /mnt/data/manual-test-data/.

1) Verify that the example code compiles and runs.

   Example code is located in $LOCI_CHECKOUT/components/bio-formats/utils/.

2) Verify that every file in the testing set can be displayed from the
   command line.

   To do this, use the command:

     showinf -normalize -minmax $FILE

   In particular, verify that the images look correct and that minimum and
   maximum pixel values look reasonable.

TODO: more command line tests needed?
